% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layer_stat_cor_plot_complex.R
\name{layer_stat_cor_plot_complex}
\alias{layer_stat_cor_plot_complex}
\title{Visualize the correlation of layer modeling t-statistics with ComplexHeatmap}
\usage{
layer_stat_cor_plot_complex(
  cor_stats_layer,
  theSeq = seq(min(cor_stats_layer), max(cor_stats_layer), by = 0.01),
  my.col = (grDevices::colorRampPalette(RColorBrewer::brewer.pal(7,
    "PRGn")))(length(theSeq)),
  query_colors = NULL,
  reference_colors = NULL,
  ...
)
}
\arguments{
\item{cor_stats_layer}{The output of \code{\link[=layer_stat_cor]{layer_stat_cor()}}.}

\item{query_colors}{named vector of colors for query row annotations}

\item{reference_colors}{named vector of colors for reference column annotations}
}
\value{
ComplexHeatmap plot of t-stat correlations
}
\description{
Visualize the correlation of layer modeling t-statistics with ComplexHeatmap
}
\examples{
## Obtain the necessary data
## reference human pilot modeling results
if (!exists("modeling_results")) {
    modeling_results <- fetch_data(type = "modeling_results")
}

## querey spatailDLPFC modeling 
query_modeling_results <- fetch_data(type = "spatialDLPFC_Visium_modeling_results")

## extract t-statics and rename
registration_t_stats <- query_modeling_results$enrichment[, grep("^t_stat", colnames(query_modeling_results$enrichment))]
colnames(registration_t_stats) <- gsub("^t_stat_", "", colnames(registration_t_stats))

## Compute the correlations
cor_stats_layer <- layer_stat_cor(
    stats = registration_t_stats,
    modeling_results,
    model_type = "enrichment"
)

## Visualize the correlation matrix

## most basic
layer_stat_cor_plot_complex(cor_stats_layer)

## add colors
## add libd_layer_colors to refrence Human Pilot layers
layer_stat_cor_plot_complex(cor_stats_layer, reference_colors = libd_layer_colors)

## supply polychrome colors to query clusters
cluster_colors <-  Polychrome::palette36.colors(nrow(cor_stats_layer))
names(cluster_colors) <- rownames(cor_stats_layer)

layer_stat_cor_plot_complex(cor_stats_layer, 
                            query_colors = cluster_colors,
                            reference_colors = libd_layer_colors)

## Apply additional ComplexHeatmap param
layer_stat_cor_plot_complex(cor_stats_layer, cluster_rows = FALSE)

}
